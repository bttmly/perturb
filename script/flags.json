[
  "--use_strict (enforce strict mode)",
  "--es5_readonly (activate correct semantics for inheriting readonliness)",
  "--es52_globals (activate new semantics for global var declarations)",
  "--harmony_typeof (enable harmony semantics for typeof)",
  "--harmony_scoping (enable harmony block scoping)",
  "--harmony_modules (enable harmony modules (implies block scoping))",
  "--harmony_proxies (enable harmony proxies)",
  "--harmony_collections (enable harmony collections (sets, maps, and weak maps))",
  "--harmony (enable all harmony features (except typeof))",
  "--packed_arrays (optimizes arrays that have no holes)",
  "--smi_only_arrays (tracks arrays with only smi values)",
  "--clever_optimizations (Optimize object size, Array shift, DOM strings and string +)",
  "--unbox_double_arrays (automatically unbox arrays of doubles)",
  "--string_slices (use string slices)",
  "--crankshaft (use crankshaft)",
  "--hydrogen_filter (optimization filter)",
  "--use_range (use hydrogen range analysis)",
  "--eliminate_dead_phis (eliminate dead phis)",
  "--use_gvn (use hydrogen global value numbering)",
  "--use_canonicalizing (use hydrogen instruction canonicalizing)",
  "--use_inlining (use function inlining)",
  "--max_inlined_source_size (maximum source size in bytes considered for a single inlining)",
  "--max_inlined_nodes (maximum number of AST nodes considered for a single inlining)",
  "--max_inlined_nodes_cumulative (maximum cumulative number of AST nodes considered for inlining)",
  "--loop_invariant_code_motion (loop invariant code motion)",
  "--collect_megamorphic_maps_from_stub_cache (crankshaft harvests type feedback from stub cache)",
  "--hydrogen_stats (print statistics for hydrogen)",
  "--trace_hydrogen (trace generated hydrogen to file)",
  "--trace_phase (trace generated IR for specified phases)",
  "--trace_inlining (trace inlining decisions)",
  "--trace_alloc (trace register allocator)",
  "--trace_all_uses (trace all use positions)",
  "--trace_range (trace range analysis)",
  "--trace_gvn (trace global value numbering)",
  "--trace_representation (trace representation types)",
  "--stress_pointer_maps (pointer map for every instruction)",
  "--stress_environments (environment for every instruction)",
  "--deopt_every_n_times (deoptimize every n times a deopt point is passed)",
  "--trap_on_deopt (put a break point before deoptimizing)",
  "--deoptimize_uncommon_cases (deoptimize uncommon cases)",
  "--polymorphic_inlining (polymorphic inlining)",
  "--use_osr (use on-stack replacement)",
  "--array_bounds_checks_elimination (perform array bounds checks elimination)",
  "--array_index_dehoisting (perform array index dehoisting)",
  "--dead_code_elimination (use dead code elimination)",
  "--trace_dead_code_elimination (trace dead code elimination)",
  "--trace_osr (trace on-stack replacement)",
  "--stress_runs (number of stress runs)",
  "--optimize_closures (optimize closures)",
  "--lookup_sample_by_shared (when picking a function to optimize, watch for shared function info, not JSFunction itself)",
  "--cache_optimized_code (cache optimized code for closures)",
  "--inline_construct (inline constructor calls)",
  "--inline_arguments (inline functions with arguments object)",
  "--inline_accessors (inline JavaScript accessors)",
  "--loop_weight (loop weight for representation inference)",
  "--optimize_for_in (optimize functions containing for-in loops)",
  "--opt_safe_uint32_operations (allow uint32 values on optimize frames if they are used only insafe operations)",
  "--parallel_recompilation (optimizing hot functions asynchronously on a separate thread)",
  "--trace_parallel_recompilation (track parallel recompilation)",
  "--parallel_recompilation_queue_length (the length of the parallel compilation queue)",
  "--experimental_profiler (enable all profiler experiments)",
  "--watch_ic_patching (profiler considers IC stability)",
  "--frame_count (number of stack frames inspected by the profiler)",
  "--self_optimization (primitive functions trigger their own optimization)",
  "--direct_self_opt (call recompile stub directly when self-optimizing)",
  "--retry_self_opt (re-try self-optimization if it failed)",
  "--count_based_interrupts (trigger profiler ticks based on counting instead of timing)",
  "--interrupt_at_exit (insert an interrupt check at function exit)",
  "--weighted_back_edges (weight back edges by jump distance for interrupt triggering)",
  "--interrupt_budget (execution budget before interrupt is triggered)",
  "--type_info_threshold (percentage of ICs that must have type info to allow optimization)",
  "--self_opt_count (call count before self-optimization)",
  "--trace_opt_verbose (extra verbose compilation tracing)",
  "--debug_code (generate extra code (assertions) for debugging)",
  "--code_comments (emit comments in code disassembly)",
  "--enable_sse2 (enable use of SSE2 instructions if available)",
  "--enable_sse3 (enable use of SSE3 instructions if available)",
  "--enable_sse4_1 (enable use of SSE4.1 instructions if available)",
  "--enable_cmov (enable use of CMOV instruction if available)",
  "--enable_rdtsc (enable use of RDTSC instruction if available)",
  "--enable_sahf (enable use of SAHF instruction if available (X64 only))",
  "--enable_vfp3 (enable use of VFP3 instructions if available - this implies enabling ARMv7 and VFP2 instructions (ARM only))",
  "--enable_vfp2 (enable use of VFP2 instructions if available)",
  "--enable_armv7 (enable use of ARMv7 instructions if available (ARM only))",
  "--enable_sudiv (enable use of SDIV and UDIV instructions if available (ARM only))",
  "--enable_movw_movt (enable loading 32-bit constant by means of movw/movt instruction pairs (ARM only))",
  "--enable_unaligned_accesses (enable unaligned accesses for ARMv7 (ARM only))",
  "--enable_fpu (enable use of MIPS FPU instructions if available (MIPS only))",
  "--expose_natives_as (expose natives in global object)",
  "--expose_debug_as (expose debug in global object)",
  "--expose_gc (expose gc extension)",
  "--expose_externalize_string (expose externalize string extension)",
  "--stack_trace_limit (number of stack frames to capture)",
  "--builtins_in_stack_traces (show built-in functions in stack traces)",
  "--disable_native_files (disable builtin natives files)",
  "--inline_new (use fast inline allocation)",
  "--stack_trace_on_abort (print a stack trace if an assertion failure occurs)",
  "--trace (trace function calls)",
  "--mask_constants_with_cookie (use random jit cookie to mask large constants)",
  "--lazy (use lazy compilation)",
  "--trace_opt (trace lazy optimization)",
  "--trace_opt_stats (trace lazy optimization statistics)",
  "--opt (use adaptive optimizations)",
  "--always_opt (always try to optimize functions)",
  "--prepare_always_opt (prepare for turning on always opt)",
  "--trace_deopt (trace deoptimization)",
  "--min_preparse_length (minimum length for automatic enable preparsing)",
  "--always_full_compiler (try to use the dedicated run-once backend for all code)",
  "--max_opt_count (maximum number of optimization attempts before giving up.)",
  "--compilation_cache (enable compilation cache)",
  "--cache_prototype_transitions (cache prototype transitions)",
  "--trace_debug_json (trace debugging JSON request/response)",
  "--debugger_auto_break (automatically set the debug break flag when debugger commands are in the queue)",
  "--enable_liveedit (enable liveedit experimental feature)",
  "--break_on_abort (always cause a debug break before aborting)",
  "--stack_size (default size of stack region v8 is allowed to use (in kBytes))",
  "--max_stack_trace_source_length (maximum length of function source code printed in a stack trace.)",
  "--always_inline_smi_code (always inline smi code in non-opt code)",
  "--max_new_space_size (max size of the new generation (in kBytes))",
  "--max_old_space_size (max size of the old generation (in Mbytes))",
  "--max_executable_size (max size of executable memory (in Mbytes))",
  "--gc_global (always perform global GCs)",
  "--gc_interval (garbage collect after <n> allocations)",
  "--trace_gc (print one trace line following each garbage collection)",
  "--trace_gc_nvp (print one detailed trace line in name=value format after each garbage collection)",
  "--trace_gc_ignore_scavenger (do not print trace line after scavenger collection)",
  "--print_cumulative_gc_stat (print cumulative GC statistics in name=value format on exit)",
  "--trace_gc_verbose (print more details following each garbage collection)",
  "--trace_fragmentation (report fragmentation for old pointer and data pages)",
  "--trace_external_memory (print amount of external allocated memory after each time it is adjusted.)",
  "--collect_maps (garbage collect maps from which no objects can be reached)",
  "--flush_code (flush code that we expect not to use again before full gc)",
  "--incremental_marking (use incremental marking)",
  "--incremental_marking_steps (do incremental marking steps)",
  "--trace_incremental_marking (trace progress of the incremental marking)",
  "--track_gc_object_stats (track object counts and memory usage)",
  "--use_idle_notification (Use idle notification to reduce memory footprint.)",
  "--use_ic (use inline caching)",
  "--native_code_counters (generate extra code for manipulating stats counters)",
  "--always_compact (Perform compaction on every full GC)",
  "--lazy_sweeping (Use lazy sweeping for old pointer and data spaces)",
  "--never_compact (Never perform compaction on full GC - testing only)",
  "--compact_code_space (Compact code space on full non-incremental collections)",
  "--incremental_code_compaction (Compact code space on full incremental collections)",
  "--cleanup_code_caches_at_gc (Flush inline caches prior to mark compact collection and flush code caches in maps during mark compact cycle.)",
  "--random_seed (Default seed for initializing random generator (0, the default, means to use system random).)",
  "--use_verbose_printer (allows verbose printing)",
  "--allow_natives_syntax (allow natives syntax)",
  "--trace_parse (trace parsing and preparsing)",
  "--trace_sim (Trace simulator execution)",
  "--check_icache (Check icache flushes in ARM and MIPS simulator)",
  "--stop_sim_at (Simulator stop after x number of instructions)",
  "--sim_stack_alignment (Stack alingment in bytes in simulator (4 or 8, 8 is default))",
  "--abort_on_uncaught_exception (abort program (dump core) when an uncaught exception is thrown)",
  "--trace_exception (print stack trace when throwing exceptions)",
  "--preallocate_message_memory (preallocate some memory to build stack traces.)",
  "--randomize_hashes (randomize hashes to avoid predictable hash collisions (with snapshots this option cannot override the baked-in seed))",
  "--hash_seed (Fixed seed to use to hash property keys (0 means random)(with snapshots this option cannot override the baked-in seed))",
  "--preemption (activate a 100ms timer that switches between V8 threads)",
  "--regexp_optimization (generate optimized regexp code)",
  "--testing_bool_flag (testing_bool_flag)",
  "--testing_int_flag (testing_int_flag)",
  "--testing_float_flag (float-flag)",
  "--testing_string_flag (string-flag)",
  "--testing_prng_seed (Seed used for threading test randomness)",
  "--testing_serialization_file (file in which to serialize heap)",
  "--extra_code (A filename with extra code to be included in the snapshot (mksnapshot only))",
  "--help (Print usage message, including flags, on console)",
  "--dump_counters (Dump counters on exit)",
  "--debugger (Enable JavaScript debugger)",
  "--remote_debugger (Connect JavaScript debugger to the debugger agent in another process)",
  "--debugger_agent (Enable debugger agent)",
  "--debugger_port (Port to use for remote debugging)",
  "--map_counters (Map counters to a file)",
  "--js_arguments (Pass all remaining arguments to the script. Alias for \"--\".)",
  "--debug_compile_events (Enable debugger compile events)",
  "--debug_script_collected_events (Enable debugger script collected events)",
  "--gdbjit (enable GDBJIT interface (disables compacting GC))",
  "--gdbjit_full (enable GDBJIT interface for all code objects)",
  "--gdbjit_dump (dump elf objects with debug info to disk)",
  "--gdbjit_dump_filter (dump only objects containing this substring)",
  "--force_marking_deque_overflows (force overflows of marking deque by reducing it's size to 64 words)",
  "--stress_compaction (stress the GC compactor to flush out bugs (implies --force_marking_deque_overflows))",
  "--log (Minimal logging (no API, code, GC, suspect, or handles samples).)",
  "--log_all (Log all events to the log file.)",
  "--log_runtime (Activate runtime system %Log call.)",
  "--log_api (Log API events to the log file.)",
  "--log_code (Log code events to the log file without profiling.)",
  "--log_gc (Log heap samples on garbage collection for the hp2ps tool.)",
  "--log_handles (Log global handle events.)",
  "--log_snapshot_positions (log positions of (de)serialized objects in the snapshot.)",
  "--log_suspect (Log suspect operations.)",
  "--prof (Log statistical profiling information (implies --log-code).)",
  "--prof_auto (Used with --prof, starts profiling automatically)",
  "--prof_lazy (Used with --prof, only does sampling and logging when profiler is active (implies --noprof_auto).)",
  "--prof_browser_mode (Used with --prof, turns on browser-compatible mode for profiling.)",
  "--log_regexp (Log regular expression execution.)",
  "--sliding_state_window (Update sliding state window counters.)",
  "--logfile (Specify the name of the log file.)",
  "--ll_prof (Enable low-level linux profiler.)",
  "--gc_fake_mmap (Specify the name of the file for fake gc mmap used in ll_prof)",
  "--use_strict (enforce strict mode)",
  "--use_strong (enforce strong mode)",
  "--strong_mode (experimental strong language mode)",
  "--es_staging (enable all completed harmony features)",
  "--harmony (enable all completed harmony features)",
  "--harmony_shipping (enable all shipped harmony fetaures)",
  "--harmony_modules (enable \"harmony modules (implies block scoping)\" (in progress))",
  "--harmony_arrays (enable \"harmony array methods\" (in progress))",
  "--harmony_array_includes (enable \"harmony Array.prototype.includes\" (in progress))",
  "--harmony_regexps (enable \"harmony regular expression extensions\" (in progress))",
  "--harmony_arrow_functions (enable \"harmony arrow functions\" (in progress))",
  "--harmony_proxies (enable \"harmony proxies\" (in progress))",
  "--harmony_sloppy (enable \"harmony features in sloppy mode\" (in progress))",
  "--harmony_unicode (enable \"harmony unicode escapes\" (in progress))",
  "--harmony_unicode_regexps (enable \"harmony unicode regexps\" (in progress))",
  "--harmony_computed_property_names (enable \"harmony computed property names\" (in progress))",
  "--harmony_rest_parameters (enable \"harmony rest parameters\" (in progress))",
  "--harmony_tostring (enable \"harmony toString\")",
  "--harmony_numeric_literals (enable \"harmony numeric literals\")",
  "--harmony_strings (enable \"harmony string methods\")",
  "--harmony_scoping (enable \"harmony block scoping\")",
  "--harmony_templates (enable \"harmony template literals\")",
  "--harmony_classes (enable \"harmony classes (implies block scoping & object literal extension)\")",
  "--harmony_object_literals (enable \"harmony object literal extensions\")",
  "--compiled_keyed_generic_loads (use optimizing compiler to generate keyed generic load stubs)",
  "--pretenuring_call_new (pretenure call new)",
  "--allocation_site_pretenuring (pretenure with allocation sites)",
  "--trace_pretenuring (trace pretenuring decisions of HAllocate instructions)",
  "--trace_pretenuring_statistics (trace allocation site pretenuring statistics)",
  "--track_fields (track fields with only smi values)",
  "--track_double_fields (track fields with double values)",
  "--track_heap_object_fields (track fields with heap values)",
  "--track_computed_fields (track computed boilerplate fields)",
  "--track_field_types (track field types)",
  "--smi_binop (support smi representation in binary operations)",
  "--vector_ics (support vector-based ics)",
  "--optimize_for_size (Enables optimizations which favor memory size over execution speed.)",
  "--unbox_double_arrays (automatically unbox arrays of doubles)",
  "--string_slices (use string slices)",
  "--crankshaft (use crankshaft)",
  "--hydrogen_filter (optimization filter)",
  "--use_gvn (use hydrogen global value numbering)",
  "--gvn_iterations (maximum number of GVN fix-point iterations)",
  "--use_canonicalizing (use hydrogen instruction canonicalizing)",
  "--use_inlining (use function inlining)",
  "--use_escape_analysis (use hydrogen escape analysis)",
  "--use_allocation_folding (use allocation folding)",
  "--use_local_allocation_folding (only fold in basic blocks)",
  "--use_write_barrier_elimination (eliminate write barriers targeting allocations in optimized code)",
  "--max_inlining_levels (maximum number of inlining levels)",
  "--max_inlined_source_size (maximum source size in bytes considered for a single inlining)",
  "--max_inlined_nodes (maximum number of AST nodes considered for a single inlining)",
  "--max_inlined_nodes_cumulative (maximum cumulative number of AST nodes considered for inlining)",
  "--loop_invariant_code_motion (loop invariant code motion)",
  "--fast_math (faster (but maybe less accurate) math functions)",
  "--collect_megamorphic_maps_from_stub_cache (crankshaft harvests type feedback from stub cache)",
  "--hydrogen_stats (print statistics for hydrogen)",
  "--trace_check_elimination (trace check elimination phase)",
  "--trace_hydrogen (trace generated hydrogen to file)",
  "--trace_hydrogen_filter (hydrogen tracing filter)",
  "--trace_hydrogen_stubs (trace generated hydrogen for stubs)",
  "--trace_hydrogen_file (trace hydrogen to given file name)",
  "--trace_phase (trace generated IR for specified phases)",
  "--trace_inlining (trace inlining decisions)",
  "--trace_load_elimination (trace load elimination)",
  "--trace_store_elimination (trace store elimination)",
  "--trace_alloc (trace register allocator)",
  "--trace_all_uses (trace all use positions)",
  "--trace_range (trace range analysis)",
  "--trace_gvn (trace global value numbering)",
  "--trace_representation (trace representation types)",
  "--trace_removable_simulates (trace removable simulates)",
  "--trace_escape_analysis (trace hydrogen escape analysis)",
  "--trace_allocation_folding (trace allocation folding)",
  "--trace_track_allocation_sites (trace the tracking of allocation sites)",
  "--trace_migration (trace object migration)",
  "--trace_generalization (trace map generalization)",
  "--stress_pointer_maps (pointer map for every instruction)",
  "--stress_environments (environment for every instruction)",
  "--deopt_every_n_times (deoptimize every n times a deopt point is passed)",
  "--deopt_every_n_garbage_collections (deoptimize every n garbage collections)",
  "--print_deopt_stress (print number of possible deopt points)",
  "--trap_on_deopt (put a break point before deoptimizing)",
  "--trap_on_stub_deopt (put a break point before deoptimizing a stub)",
  "--deoptimize_uncommon_cases (deoptimize uncommon cases)",
  "--polymorphic_inlining (polymorphic inlining)",
  "--use_osr (use on-stack replacement)",
  "--array_bounds_checks_elimination (perform array bounds checks elimination)",
  "--trace_bce (trace array bounds check elimination)",
  "--array_bounds_checks_hoisting (perform array bounds checks hoisting)",
  "--array_index_dehoisting (perform array index dehoisting)",
  "--analyze_environment_liveness (analyze liveness of environment slots and zap dead values)",
  "--load_elimination (use load elimination)",
  "--check_elimination (use check elimination)",
  "--store_elimination (use store elimination)",
  "--dead_code_elimination (use dead code elimination)",
  "--fold_constants (use constant folding)",
  "--trace_dead_code_elimination (trace dead code elimination)",
  "--unreachable_code_elimination (eliminate unreachable code)",
  "--trace_osr (trace on-stack replacement)",
  "--stress_runs (number of stress runs)",
  "--lookup_sample_by_shared (when picking a function to optimize, watch for shared function info, not JSFunction itself)",
  "--cache_optimized_code (cache optimized code for closures)",
  "--flush_optimized_code_cache (flushes the cache of optimized code for closures on every GC)",
  "--inline_construct (inline constructor calls)",
  "--inline_arguments (inline functions with arguments object)",
  "--inline_accessors (inline JavaScript accessors)",
  "--escape_analysis_iterations (maximum number of escape analysis fix-point iterations)",
  "--optimize_for_in (optimize functions containing for-in loops)",
  "--concurrent_recompilation (optimizing hot functions asynchronously on a separate thread)",
  "--job_based_recompilation (post tasks to v8::Platform instead of using a thread for concurrent recompilation)",
  "--trace_concurrent_recompilation (track concurrent recompilation)",
  "--concurrent_recompilation_queue_length (the length of the concurrent compilation queue)",
  "--concurrent_recompilation_delay (artificial compilation delay in ms)",
  "--block_concurrent_recompilation (block queued jobs until released)",
  "--concurrent_osr (concurrent on-stack replacement)",
  "--omit_map_checks_for_leaf_maps (do not emit check maps for constant values that have a leaf map, deoptimize the optimized code if the layout of the maps changes.)",
  "--turbo_filter (optimization filter for TurboFan compiler)",
  "--trace_turbo (trace generated TurboFan IR)",
  "--trace_turbo_graph (trace generated TurboFan graphs)",
  "--trace_turbo_cfg_file (trace turbo cfg graph (for C1 visualizer) to a given file name)",
  "--trace_turbo_types (trace TurboFan's types)",
  "--trace_turbo_scheduler (trace TurboFan's scheduler)",
  "--trace_turbo_reduction (trace TurboFan's various reducers)",
  "--trace_turbo_jt (trace TurboFan's jump threading)",
  "--turbo_asm (enable TurboFan for asm.js code)",
  "--turbo_verify (verify TurboFan graphs at each phase)",
  "--turbo_stats (print TurboFan statistics)",
  "--turbo_splitting (split nodes during scheduling in TurboFan)",
  "--turbo_types (use typed lowering in TurboFan)",
  "--turbo_source_positions (track source code positions when building TurboFan IR)",
  "--context_specialization (enable context specialization in TurboFan)",
  "--turbo_deoptimization (enable deoptimization in TurboFan)",
  "--turbo_inlining (enable inlining in TurboFan)",
  "--trace_turbo_inlining (trace TurboFan inlining)",
  "--loop_assignment_analysis (perform loop assignment analysis)",
  "--turbo_profiling (enable profiling in TurboFan)",
  "--turbo_delay_ssa_decon (delay ssa deconstruction in TurboFan register allocator)",
  "--turbo_verify_allocation (verify register allocation in TurboFan)",
  "--turbo_move_optimization (optimize gap moves in TurboFan)",
  "--turbo_jt (enable jump threading in TurboFan)",
  "--turbo_osr (enable OSR in TurboFan)",
  "--turbo_exceptions (enable exception handling in TurboFan)",
  "--turbo_stress_loop_peeling (stress loop peeling optimization)",
  "--turbo_switch (optimize switches in TurboFan)",
  "--typed_array_max_size_in_heap (threshold for in-heap typed array)",
  "--frame_count (number of stack frames inspected by the profiler)",
  "--interrupt_budget (execution budget before interrupt is triggered)",
  "--type_info_threshold (percentage of ICs that must have type info to allow optimization)",
  "--generic_ic_threshold (max percentage of megamorphic/generic ICs to allow optimization)",
  "--self_opt_count (call count before self-optimization)",
  "--trace_opt_verbose (extra verbose compilation tracing)",
  "--debug_code (generate extra code (assertions) for debugging)",
  "--code_comments (emit comments in code disassembly)",
  "--enable_sse3 (enable use of SSE3 instructions if available)",
  "--enable_sse4_1 (enable use of SSE4.1 instructions if available)",
  "--enable_sahf (enable use of SAHF instruction if available (X64 only))",
  "--enable_avx (enable use of AVX instructions if available)",
  "--enable_fma3 (enable use of FMA3 instructions if available)",
  "--enable_vfp3 (enable use of VFP3 instructions if available)",
  "--enable_armv7 (enable use of ARMv7 instructions if available (ARM only))",
  "--enable_armv8 (enable use of ARMv8 instructions if available (ARM 32-bit only))",
  "--enable_neon (enable use of NEON instructions if available (ARM only))",
  "--enable_sudiv (enable use of SDIV and UDIV instructions if available (ARM only))",
  "--enable_mls (enable use of MLS instructions if available (ARM only))",
  "--enable_movw_movt (enable loading 32-bit constant by means of movw/movt instruction pairs (ARM only))",
  "--enable_unaligned_accesses (enable unaligned accesses for ARMv7 (ARM only))",
  "--enable_32dregs (enable use of d16-d31 registers on ARM - this requires VFP3)",
  "--enable_vldr_imm (enable use of constant pools for double immediate (ARM only))",
  "--force_long_branches (force all emitted branches to be in long mode (MIPS/PPC only))",
  "--mcpu (enable optimization for specific cpu)",
  "--expose_natives_as (expose natives in global object)",
  "--expose_debug_as (expose debug in global object)",
  "--expose_free_buffer (expose freeBuffer extension)",
  "--expose_gc (expose gc extension)",
  "--expose_gc_as (expose gc extension under the specified name)",
  "--expose_externalize_string (expose externalize string extension)",
  "--expose_trigger_failure (expose trigger-failure extension)",
  "--stack_trace_limit (number of stack frames to capture)",
  "--builtins_in_stack_traces (show built-in functions in stack traces)",
  "--disable_native_files (disable builtin natives files)",
  "--inline_new (use fast inline allocation)",
  "--trace_codegen (print name of functions for which code is generated)",
  "--trace (trace function calls)",
  "--mask_constants_with_cookie (use random jit cookie to mask large constants)",
  "--lazy (use lazy compilation)",
  "--trace_opt (trace lazy optimization)",
  "--trace_opt_stats (trace lazy optimization statistics)",
  "--opt (use adaptive optimizations)",
  "--always_opt (always try to optimize functions)",
  "--always_osr (always try to OSR functions)",
  "--prepare_always_opt (prepare for turning on always opt)",
  "--trace_deopt (trace optimize function deoptimization)",
  "--trace_stub_failures (trace deoptimization of generated code stubs)",
  "--serialize_toplevel (enable caching of toplevel scripts)",
  "--serialize_inner (enable caching of inner functions)",
  "--trace_serializer (print code serializer trace)",
  "--min_preparse_length (minimum length for automatic enable preparsing)",
  "--max_opt_count (maximum number of optimization attempts before giving up.)",
  "--compilation_cache (enable compilation cache)",
  "--cache_prototype_transitions (cache prototype transitions)",
  "--cpu_profiler_sampling_interval (CPU profiler sampling interval in microseconds)",
  "--trace_debug_json (trace debugging JSON request/response)",
  "--trace_js_array_abuse (trace out-of-bounds accesses to JS arrays)",
  "--trace_external_array_abuse (trace out-of-bounds-accesses to external arrays)",
  "--trace_array_abuse (trace out-of-bounds accesses to all arrays)",
  "--enable_liveedit (enable liveedit experimental feature)",
  "--hard_abort (abort by crashing)",
  "--stack_size (default size of stack region v8 is allowed to use (in kBytes))",
  "--max_stack_trace_source_length (maximum length of function source code printed in a stack trace.)",
  "--always_inline_smi_code (always inline smi code in non-opt code)",
  "--min_semi_space_size (min size of a semi-space (in MBytes), the new space consists of twosemi-spaces)",
  "--target_semi_space_size (target size of a semi-space (in MBytes) before triggering a GC)",
  "--max_semi_space_size (max size of a semi-space (in MBytes), the new space consists of twosemi-spaces)",
  "--semi_space_growth_factor (factor by which to grow the new space)",
  "--experimental_new_space_growth_heuristic (Grow the new space based on the percentage of survivors instead of their absolute value.)",
  "--max_old_space_size (max size of the old space (in Mbytes))",
  "--initial_old_space_size (initial old space size (in Mbytes))",
  "--max_executable_size (max size of executable memory (in Mbytes))",
  "--gc_global (always perform global GCs)",
  "--gc_interval (garbage collect after <n> allocations)",
  "--trace_gc (print one trace line following each garbage collection)",
  "--trace_gc_nvp (print one detailed trace line in name=value format after each garbage collection)",
  "--trace_gc_ignore_scavenger (do not print trace line after scavenger collection)",
  "--trace_idle_notification (print one trace line following each idle notification)",
  "--trace_idle_notification_verbose (prints the heap state used by the idle notification)",
  "--print_cumulative_gc_stat (print cumulative GC statistics in name=value format on exit)",
  "--print_max_heap_committed (print statistics of the maximum memory committed for the heap in name=value format on exit)",
  "--trace_gc_verbose (print more details following each garbage collection)",
  "--trace_fragmentation (report fragmentation for old pointer and data pages)",
  "--collect_maps (garbage collect maps from which no objects can be reached)",
  "--weak_embedded_maps_in_optimized_code (make maps embedded in optimized code weak)",
  "--weak_embedded_objects_in_optimized_code (make objects embedded in optimized code weak)",
  "--flush_code (flush code that we expect not to use again (during full gc))",
  "--flush_code_incrementally (flush code that we expect not to use again (incrementally))",
  "--trace_code_flushing (trace code flushing progress)",
  "--age_code (track un-executed functions to age code and flush only old code (required for code flushing))",
  "--incremental_marking (use incremental marking)",
  "--incremental_marking_steps (do incremental marking steps)",
  "--overapproximate_weak_closure (overapproximate weak closer to reduce atomic pause time)",
  "--concurrent_sweeping (use concurrent sweeping)",
  "--trace_incremental_marking (trace progress of the incremental marking)",
  "--track_gc_object_stats (track object counts and memory usage)",
  "--track_detached_contexts (track native contexts that are expected to be garbage collected)",
  "--trace_detached_contexts (trace native contexts that are expected to be garbage collected)",
  "--heap_profiler_trace_objects (Dump heap object allocations/movements/size_updates)",
  "--use_idle_notification (Use idle notification to reduce memory footprint.)",
  "--use_ic (use inline caching)",
  "--trace_ic (trace inline cache state transitions)",
  "--native_code_counters (generate extra code for manipulating stats counters)",
  "--always_compact (Perform compaction on every full GC)",
  "--never_compact (Never perform compaction on full GC - testing only)",
  "--compact_code_space (Compact code space on full non-incremental collections)",
  "--incremental_code_compaction (Compact code space on full incremental collections)",
  "--cleanup_code_caches_at_gc (Flush inline caches prior to mark compact collection and flush code caches in maps during mark compact cycle.)",
  "--use_marking_progress_bar (Use a progress bar to scan large objects in increments when incremental marking is active.)",
  "--zap_code_space (Zap free memory in code space with 0xCC while sweeping.)",
  "--random_seed (Default seed for initializing random generator (0, the default, means to use system random).)",
  "--trace_weak_arrays (trace WeakFixedArray usage)",
  "--track_prototype_users (keep track of which maps refer to a given prototype object)",
  "--use_verbose_printer (allows verbose printing)",
  "--allow_natives_syntax (allow natives syntax)",
  "--trace_parse (trace parsing and preparsing)",
  "--trace_sim (Trace simulator execution)",
  "--debug_sim (Enable debugging the simulator)",
  "--check_icache (Check icache flushes in ARM and MIPS simulator)",
  "--stop_sim_at (Simulator stop after x number of instructions)",
  "--sim_stack_alignment (Stack alingment in bytes in simulator (4 or 8, 8 is default))",
  "--sim_stack_size (Stack size of the ARM64 and MIPS64 simulator in kBytes (default is 2 MB))",
  "--log_regs_modified (When logging register values, only print modified registers.)",
  "--log_colour (When logging, try to use coloured output.)",
  "--ignore_asm_unimplemented_break (Don't break for ASM_UNIMPLEMENTED_BREAK macros.)",
  "--trace_sim_messages (Trace simulator debug messages. Implied by --trace-sim.)",
  "--stack_trace_on_illegal (print stack trace when an illegal exception is thrown)",
  "--abort_on_uncaught_exception (abort program (dump core) when an uncaught exception is thrown)",
  "--randomize_hashes (randomize hashes to avoid predictable hash collisions (with snapshots this option cannot override the baked-in seed))",
  "--hash_seed (Fixed seed to use to hash property keys (0 means random)(with snapshots this option cannot override the baked-in seed))",
  "--profile_deserialization (Print the time it takes to deserialize the snapshot.)",
  "--regexp_optimization (generate optimized regexp code)",
  "--testing_bool_flag (testing_bool_flag)",
  "--testing_maybe_bool_flag (testing_maybe_bool_flag)",
  "--testing_int_flag (testing_int_flag)",
  "--testing_float_flag (float-flag)",
  "--testing_string_flag (string-flag)",
  "--testing_prng_seed (Seed used for threading test randomness)",
  "--testing_serialization_file (file in which to serialize heap)",
  "--startup_blob (Write V8 startup blob file. (mksnapshot only))",
  "--profile_hydrogen_code_stub_compilation (Print the time it takes to lazily compile hydrogen code stubs.)",
  "--predictable (enable predictable mode)",
  "--help (Print usage message, including flags, on console)",
  "--dump_counters (Dump counters on exit)",
  "--debugger (Enable JavaScript debugger)",
  "--map_counters (Map counters to a file)",
  "--js_arguments (Pass all remaining arguments to the script. Alias for \"--\".)",
  "--gdbjit (enable GDBJIT interface (disables compacting GC))",
  "--gdbjit_full (enable GDBJIT interface for all code objects)",
  "--gdbjit_dump (dump elf objects with debug info to disk)",
  "--gdbjit_dump_filter (dump only objects containing this substring)",
  "--force_marking_deque_overflows (force overflows of marking deque by reducing it's size to 64 words)",
  "--stress_compaction (stress the GC compactor to flush out bugs (implies --force_marking_deque_overflows))",
  "--log (Minimal logging (no API, code, GC, suspect, or handles samples).)",
  "--log_all (Log all events to the log file.)",
  "--log_api (Log API events to the log file.)",
  "--log_code (Log code events to the log file without profiling.)",
  "--log_gc (Log heap samples on garbage collection for the hp2ps tool.)",
  "--log_handles (Log global handle events.)",
  "--log_snapshot_positions (log positions of (de)serialized objects in the snapshot.)",
  "--log_suspect (Log suspect operations.)",
  "--prof (Log statistical profiling information (implies --log-code).)",
  "--prof_cpp (Like --prof, but ignore generated code.)",
  "--prof_browser_mode (Used with --prof, turns on browser-compatible mode for profiling.)",
  "--log_regexp (Log regular expression execution.)",
  "--logfile (Specify the name of the log file.)",
  "--logfile_per_isolate (Separate log files for each isolate.)",
  "--ll_prof (Enable low-level linux profiler.)",
  "--perf_basic_prof (Enable perf linux profiler (basic support).)",
  "--perf_jit_prof (Enable perf linux profiler (experimental annotate support).)",
  "--gc_fake_mmap (Specify the name of the file for fake gc mmap used in ll_prof)",
  "--log_internal_timer_events (Time internal events.)",
  "--log_timer_events (Time events including external callbacks.)",
  "--log_instruction_stats (Log AArch64 instruction statistics.)",
  "--log_instruction_file (AArch64 instruction statistics log file.)",
  "--log_instruction_period (AArch64 instruction statistics logging period.)",
  "--redirect_code_traces (output deopt information and disassembly into file code-<pid>-<isolate id>.asm)",
  "--redirect_code_traces_to (output deopt information and disassembly into the given file)",
  "--hydrogen_track_positions (track source code positions when building IR)",
  "--trace_elements_transitions (trace elements transitions)",
  "--trace_creation_allocation_sites (trace the creation of allocation sites)",
  "--print_code_stubs (print code stubs)",
  "--test_secondary_stub_cache (test secondary stub cache by disabling the primary one)",
  "--test_primary_stub_cache (test primary stub cache by disabling the secondary one)",
  "--print_code (print generated code)",
  "--print_opt_code (print optimized code)",
  "--print_unopt_code (print unoptimized code before printing optimized code based on it)",
  "--print_code_verbose (print more information for code)",
  "--print_builtin_code (print generated code for builtins)",
  "--sodium (print generated code output suitable for use with the Sodium code viewer)",
  "--print_all_code (enable all flags related to printing code)"
]