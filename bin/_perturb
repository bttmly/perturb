#!/usr/bin/env node

"use strict";

var exec = require("child_process").exec;
var path = require("path");

var program = require("commander");

var perturb = require("../");
var generateConfig = require("../lib/config").generate;
var MESSAGES = require("../lib/constant/messages");

var pkg = require("../package.json");

function omitUndefined (target) {
  var out = {};
  Object.keys(target).forEach(function (key) {
    if (target[key] === undefined) return;
    out[key] = target[key];
  });
  return out;
}

program
  .version(pkg.version)
  .option("-r, --rootDir <rootDir>", "root directory of the project")
  .option("-t, --testDir <testDir>", "test directory relative to root directory")
  .option("-s, --sourceDir <sourceDir>", "source directory relative to root directory")
  .option("-x, --testGlob <testGlob>", "glob for selecting files in test directory")
  .option("-y, --sourceGlob <sourceGlob>", "glob for selecting files in source directory")
  .option("-c, --testCmd <testCmd>", "test command")
  .option("-i, --interception", "use interception strategy (no disk I/O)")
  .option("-v, --verbose", "lots of logging")
  .option("-k, --killRate", "minimum kill rate to exit with code 0")
  .parse(process.argv);

if (program.rootDir && program.rootDir[0] !== "/") {
  program.rootDir = path.join(process.cwd(), program.rootDir);
}

var userConfig = omitUndefined({
  rootDir: program.rootDir,
  testDir: program.testDir,
  sourceDir: program.sourceDir,
  testGlob: program.testGlob,
  sourceGlob: program.sourceGlob,
  testCmd: program.testCmd,
  interception: program.interception,
});

// this will become the default reporter
function reporter (err, data) {
  if (err) throw err;
  console.log(data.meta);
}

function runTests (settings, cb) {
  var cmd = settings.testCmd || MESSAGES.DefaultTest;
  console.log(MESSAGES.ExecutingTests, cmd);
  exec(cmd, function (err) {
    if (err) return cb(err);
    console.log(MESSAGES.TestsPassed);
    cb(null, settings);
  });
}

runTests(generateConfig(userConfig), function (err, config) {
  if (err) throw err;
  perturb(config, reporter);
});


