#!/usr/bin/env node

"use strict";

console.log(process.argv);

var program = require("commander");

var path = require("path");

var perturb = require("../");
var pkg = require("../package.json");

function assignNoUndefined (target, source) {
  Object.keys(source).forEach(function (key) {
    if (source[key] === undefined) return;
    target[key] = source[key];
  });
  return target;
}

program
  .version(pkg.version)
  .option("-r, --rootDir <rootDir>", "root directory of the project")
  .option("-t, --testDir <testDir>", "test directory relative to root directory")
  .option("-s, --sourceDir <sourceDir>", "source directory relative to root directory")
  .option("-x, --testGlob <testGlob>", "glob for selecting files in test directory")
  .option("-y, --sourceGlob <sourceGlob>", "glob for selecting files in source directory")
  .option("-c, --testCmd <testCmd>", "test command")
  .option("-i, --interception", "use interception strategy (no disk I/O)")
  .option("-v, --verbose", "lots of logging")
  .parse(process.argv);

if (program.rootDir && program.rootDir[0] !== "/") {
  program.rootDir = path.join(process.cwd(), program.rootDir);
}

var config = assignNoUndefined({}, {
  rootDir: program.rootDir,
  testDir: program.testDir,
  sourceDir: program.sourceDir,
  testGlob: program.testGlob,
  sourceGlob: program.sourceGlob,
  testCmd: program.testCmd,
  interception: program.interception,
});

// this will become the default reporter
function reporter (err, data) {
  if (err) {
    console.log(err.toString());
    process.exit(1);
  }
  var mutants = data.matches[0].mutations;
  console.log(data.meta);
}

perturb(config, reporter);
